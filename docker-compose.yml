services:
  # PostgreSQL数据库
  postgres:
    image: pgvector/pgvector:pg16
    container_name: mirix-postgres
    environment:
      POSTGRES_DB: mirix
      POSTGRES_USER: mirix
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mirix123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mirix -d mirix"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mirix-network

  # Redis缓存（可选，用于会话管理和缓存）
  redis:
    image: redis:7-alpine
    container_name: mirix-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - mirix-network

  # MIRIX后端服务
  mirix-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mirix-backend
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://mirix:${POSTGRES_PASSWORD:-mirix123}@postgres:5432/mirix
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # 服务配置
      HOST: 0.0.0.0
      PORT: 47283
      
      # API密钥（从环境变量或.env文件加载）
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
      
      # 其他配置
      PYTHONPATH: /app
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - mirix_data:/app/data
      - mirix_logs:/app/logs
      - mirix_config:/home/mirix/.mirix
    ports:
      - "47283:47283"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:47283/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - mirix-network

  # MIRIX前端服务
  mirix-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: mirix-frontend
    ports:
      - "18001:80"
    depends_on:
      - mirix-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://172.21.73.86:18001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - mirix-network

  # MCP SSE服务（对外提供MCP服务）
  mirix-mcp-sse:
    build:
      context: .
      dockerfile: Dockerfile.mcp-sse
    container_name: mirix-mcp-sse
    environment:
      MIRIX_BACKEND_URL: http://mirix-backend:47283
      MCP_SSE_PORT: 8080
      MCP_SSE_HOST: 0.0.0.0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "18002:8080"
    depends_on:
      mirix-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.21.73.86:18002/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - mirix-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mirix_data:
    driver: local
  mirix_logs:
    driver: local
  mirix_config:
    driver: local

networks:
  mirix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16